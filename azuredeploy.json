{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "ARM template to deploy n8n workflow automation platform on Azure Container Apps with PostgreSQL database, Key Vault for secrets, and Azure Container Registry",
    "author": "n8n Azure Deployment"
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "n8n-env",
      "metadata": {
        "description": "Name of the Container Apps Environment"
      }
    },
    "containerAppName": {
      "type": "string",
      "defaultValue": "my-n8n-app",
      "metadata": {
        "description": "Name of the Container App"
      }
    },
    "acrName": {
      "type": "string",
      "defaultValue": "[concat('n8nacr', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Azure Container Registry"
      }
    },
    "imageName": {
      "type": "string",
      "defaultValue": "n8n-azure",
      "metadata": {
        "description": "Name of the container image"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Tag of the container image"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[concat('n8n-kv-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Azure Key Vault"
      }
    },
    "postgresServerName": {
      "type": "string",
      "defaultValue": "[concat('n8n-db-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the PostgreSQL Flexible Server"
      }
    },
    "postgresAdminUser": {
      "type": "string",
      "defaultValue": "n8n_admin",
      "metadata": {
        "description": "Administrator username for PostgreSQL server"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Administrator password for PostgreSQL server"
      }
    },
    "postgresDatabaseName": {
      "type": "string",
      "defaultValue": "n8n",
      "metadata": {
        "description": "Name of the PostgreSQL database"
      }
    },
    "n8nUsername": {
      "type": "string",
      "defaultValue": "admin",
      "metadata": {
        "description": "n8n admin username"
      }
    },
    "n8nAdminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "n8n admin password"
      }
    },
    "n8nEncryptionKey": {
      "type": "securestring",
      "minLength": 24,
      "metadata": {
        "description": "n8n encryption key (base64 encoded)"
      }
    },
    "containerCpu": {
      "type": "string",
      "defaultValue": "2.0",
      "allowedValues": [
        "0.25",
        "0.5",
        "0.75",
        "1.0",
        "1.25",
        "1.5",
        "1.75",
        "2.0"
      ],
      "metadata": {
        "description": "CPU allocation for the container app"
      }
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "4Gi",
      "allowedValues": [
        "0.5Gi",
        "1Gi",
        "1.5Gi",
        "2Gi",
        "2.5Gi",
        "3Gi",
        "3.5Gi",
        "4Gi"
      ],
      "metadata": {
        "description": "Memory allocation for the container app"
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 25,
      "metadata": {
        "description": "Minimum number of replicas"
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 25,
      "metadata": {
        "description": "Maximum number of replicas"
      }
    },
    "postgresSkuName": {
      "type": "string",
      "defaultValue": "Standard_B1ms",
      "allowedValues": [
        "Standard_B1ms",
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D2s_v3",
        "Standard_D4s_v3"
      ],
      "metadata": {
        "description": "PostgreSQL server SKU name"
      }
    },
    "postgresStorageSize": {
      "type": "int",
      "defaultValue": 32,
      "minValue": 32,
      "maxValue": 16384,
      "metadata": {
        "description": "PostgreSQL server storage size in GB"
      }
    },
    "postgresVersion": {
      "type": "string",
      "defaultValue": "14",
      "allowedValues": [
        "11",
        "12",
        "13",
        "14",
        "15"
      ],
      "metadata": {
        "description": "PostgreSQL server version"
      }
    },
    "timezone": {
      "type": "string",
      "defaultValue": "UTC",
      "metadata": {
        "description": "Timezone for n8n application"
      }
    },
    "enablePublicAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable public access to PostgreSQL server"
      }
    }
  },
  "variables": {
    "postgresHost": "[concat(parameters('postgresServerName'), '.postgres.database.azure.com')]",
    "keyVaultSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
    "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
    "keyVaultSecretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-01-01-preview",
      "name": "[parameters('acrName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": false,
        "publicNetworkAccess": "Enabled",
        "networkRuleBypassOptions": "AzureServices"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-12-01",
      "name": "[parameters('postgresServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('postgresSkuName')]",
        "tier": "Burstable"
      },
      "properties": {
        "administratorLogin": "[parameters('postgresAdminUser')]",
        "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
        "version": "[parameters('postgresVersion')]",
        "storage": {
          "storageSizeGB": "[parameters('postgresStorageSize')]"
        },
        "backup": {
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "network": {
          "publicNetworkAccess": "[if(parameters('enablePublicAccess'), 'Enabled', 'Disabled')]"
        },
        "highAvailability": {
          "mode": "Disabled"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2022-12-01",
      "name": "[concat(parameters('postgresServerName'), '/', parameters('postgresDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ],
      "properties": {
        "charset": "UTF8",
        "collation": "en_US.utf8"
      }
    },
    {
      "condition": "[parameters('enablePublicAccess')]",
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2022-12-01",
      "name": "[concat(parameters('postgresServerName'), '/AllowAllAzureServicesAndResourcesWithinAzureIps')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "condition": "[parameters('enablePublicAccess')]",
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2022-12-01",
      "name": "[concat(parameters('postgresServerName'), '/AllowAllIps')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": false,
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(parameters('keyVaultName'), '/N8N-Encryption-Key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('n8nEncryptionKey')]",
        "contentType": "text/plain"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(parameters('keyVaultName'), '/N8N-DB-Password')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('postgresAdminPassword')]",
        "contentType": "text/plain"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(parameters('keyVaultName'), '/N8N-Admin-Password')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('n8nAdminPassword')]",
        "contentType": "text/plain"
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[parameters('environmentName')]",
      "location": "[parameters('location')]",
      "properties": {
        "workloadProfiles": [
          {
            "name": "Consumption",
            "workloadProfileType": "Consumption"
          }
        ]
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[parameters('containerAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'N8N-Encryption-Key')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'N8N-DB-Password')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'N8N-Admin-Password')]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/databases', parameters('postgresServerName'), parameters('postgresDatabaseName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "workloadProfileName": "Consumption",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 5678,
            "allowInsecure": false,
            "traffic": [
              {
                "weight": 100,
                "latestRevision": true
              }
            ]
          },
          "registries": [
            {
              "server": "[concat(parameters('acrName'), '.azurecr.io')]",
              "identity": "system"
            }
          ],
          "secrets": [
            {
              "name": "n8n-encryption-key",
              "keyVaultUrl": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/secrets/N8N-Encryption-Key')]",
              "identity": "system"
            },
            {
              "name": "n8n-db-password",
              "keyVaultUrl": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/secrets/N8N-DB-Password')]",
              "identity": "system"
            },
            {
              "name": "n8n-admin-password",
              "keyVaultUrl": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/secrets/N8N-Admin-Password')]",
              "identity": "system"
            }
          ]
        },
        "template": {
          "revisionSuffix": "initial",
          "containers": [
            {
              "name": "n8n",
              "image": "[concat(parameters('acrName'), '.azurecr.io/', parameters('imageName'), ':', parameters('imageTag'))]",
              "resources": {
                "cpu": "[parameters('containerCpu')]",
                "memory": "[parameters('containerMemory')]"
              },
              "env": [
                {
                  "name": "N8N_ENCRYPTION_KEY",
                  "secretRef": "n8n-encryption-key"
                },
                {
                  "name": "DB_TYPE",
                  "value": "postgresdb"
                },
                {
                  "name": "DB_POSTGRESDB_HOST",
                  "value": "[variables('postgresHost')]"
                },
                {
                  "name": "DB_POSTGRESDB_PORT",
                  "value": "5432"
                },
                {
                  "name": "DB_POSTGRESDB_DATABASE",
                  "value": "[parameters('postgresDatabaseName')]"
                },
                {
                  "name": "DB_POSTGRESDB_USER",
                  "value": "[parameters('postgresAdminUser')]"
                },
                {
                  "name": "DB_POSTGRESDB_PASSWORD",
                  "secretRef": "n8n-db-password"
                },
                {
                  "name": "GENERIC_TIMEZONE",
                  "value": "[parameters('timezone')]"
                },
                {
                  "name": "N8N_BASIC_AUTH_ACTIVE",
                  "value": "true"
                },
                {
                  "name": "N8N_BASIC_AUTH_USER",
                  "value": "[parameters('n8nUsername')]"
                },
                {
                  "name": "N8N_BASIC_AUTH_PASSWORD",
                  "secretRef": "n8n-admin-password"
                },
                {
                  "name": "TRUST_PROXY",
                  "value": "true"
                },
                {
                  "name": "N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS",
                  "value": "false"
                },
                {
                  "name": "DB_POSTGRESDB_CONNECTION_TIMEOUT",
                  "value": "3000"
                },
                {
                  "name": "N8N_RUNNERS_ENABLED",
                  "value": "true"
                },
                {
                  "name": "N8N_PROXY_HOPS",
                  "value": "1"
                },
                {
                  "name": "N8N_LOG_LEVEL",
                  "value": "error"
                },
                {
                  "name": "N8N_DIAGNOSTICS_ENABLED",
                  "value": "false"
                },
                {
                  "name": "N8N_VERSION_CHECK_ENABLED",
                  "value": "false"
                },
                {
                  "name": "N8N_TEMPLATES_ENABLED",
                  "value": "false"
                },
                {
                  "name": "N8N_DISABLE_EXTERNAL_ERROR_REPORTING",
                  "value": "false"
                },
                {
                  "name": "N8N_LOG_OUTPUT",
                  "value": "console"
                },
                {
                  "name": "N8N_HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "N8N_PORT",
                  "value": "5678"
                },
                {
                  "name": "N8N_PROTOCOL",
                  "value": "http"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": "[parameters('minReplicas')]",
            "maxReplicas": "[parameters('maxReplicas')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('containerAppName'), 'AcrPull')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
      ],
      "scope": "[concat('Microsoft.ContainerRegistry/registries/', parameters('acrName'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPullRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('containerAppName'), 'KeyVaultSecretsUser')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "scope": "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "containerAppFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName'))).configuration.ingress.fqdn]"
    },
    "containerAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName'))).configuration.ingress.fqdn)]"
    },
    "postgresServerFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))).fullyQualifiedDomainName]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]"
    },
    "acrLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))).loginServer]"
    },
    "containerAppIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01', 'Full').identity.principalId]"
    },
    "deploymentInstructions": {
      "type": "object",
      "value": {
        "step1": "Build and push your n8n Docker image to the ACR",
        "step2": "Access n8n at the provided URL",
        "step3": "Login with the provided username and retrieve password from Key Vault",
        "acrBuildCommand": "[concat('az acr build --registry ', parameters('acrName'), ' --image ', parameters('imageName'), ':', parameters('imageTag'), ' .')]",
        "passwordRetrievalCommand": "[concat('az keyvault secret show --vault-name ', parameters('keyVaultName'), ' --name N8N-Admin-Password --query value -o tsv')]"
      }
    }
  }
}
